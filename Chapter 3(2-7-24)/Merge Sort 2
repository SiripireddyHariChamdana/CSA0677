#include <stdio.h>

int merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    int count = 0;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
        count++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
        count++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
        count++;
    }

    return count;
}

int mergeSort(int arr[], int l, int r) {
    int count = 0;
    if (l < r) {
        int m = l + (r - l) / 2;

        count += mergeSort(arr, l, m);
        count += mergeSort(arr, m + 1, r);

        count += merge(arr, l, m, r);
    }
    return count;
}

void printArray(int A[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

int main() {
    int arr[] = {12, 4, 78, 23, 45, 67, 89, 1};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array: \n");
    printArray(arr, arr_size);

    int comparisons = mergeSort(arr, 0, arr_size - 1);

    printf("\nSorted array: \n");
    printArray(arr, arr_size);

    printf("\nTotal comparisons made: %d\n", comparisons);

    return 0;
}
