#include <stdio.h>

// Definition for the BinaryMatrix interface
typedef struct {
    int** matrix;
    int rows;
    int cols;
} BinaryMatrix;

// Function to get value from the binary matrix
int BinaryMatrix_get(BinaryMatrix* bm, int row, int col) {
    return bm->matrix[row][col];
}

// Function to get dimensions of the binary matrix
void BinaryMatrix_dimensions(BinaryMatrix* bm, int* rows, int* cols) {
    *rows = bm->rows;
    *cols = bm->cols;
}

// Function to find the leftmost column with at least a 1
int leftMostColumnWithOne(BinaryMatrix* bm) {
    int rows, cols;
    BinaryMatrix_dimensions(bm, &rows, &cols);

    int current_row = 0;
    int current_col = cols - 1;
    int result = -1;

    while (current_row < rows && current_col >= 0) {
        if (BinaryMatrix_get(bm, current_row, current_col) == 1) {
            result = current_col;
            current_col--;
        } else {
            current_row++;
        }
    }

    return result;
}

int main() {
    // Example usage:
    int mat[4][4] = {
        {0, 0, 0, 1},
        {0, 0, 1, 1},
        {0, 1, 1, 1},
        {0, 0, 0, 0}
    };

    // Convert to pointer array for the BinaryMatrix
    int* matPtrs[4];
    for (int i = 0; i < 4; i++) {
        matPtrs[i] = mat[i];
    }

    BinaryMatrix bm = {matPtrs, 4, 4};

    int result = leftMostColumnWithOne(&bm);
    printf("The leftmost column with at least a 1 is: %d\n", result);

    return 0;
}
