#include <stdio.h>
void swap(int* a, int* b) 
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
int partition(int arr[], int low, int high) 
{
    int pivot = arr[low]; 
    int i = low, j = high;

    while (i < j) 
{        
        while (arr[i] <= pivot && i <= high)
            i++;
        while (arr[j] > pivot && j >= low)
            j--;
        if (i < j)
            swap(&arr[i], &arr[j]);
    }
    swap(&arr[low], &arr[j]);

    return j;
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
{
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
        printf("Partition at index %d: ", pi);
        for (int k = low; k <= high; k++)
            printf("%d ", arr[k]);
        printf("\n");
    }
}
void printArray(int arr[], int size) 
{
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() 
{
    int a1[] = {10, 16, 8, 12, 15, 6, 3, 9, 5};
    int N1 = sizeof(a1) / sizeof(a1[0]);
    printf("Input: N=%d, a[] = {10,16,8,12,15,6,3,9,5}\n");
    quickSort(a1, 0, N1 - 1);
    printf("Output: ");
    printArray(a1, N1);

    int a2[] = {12, 4, 78, 23, 45, 67, 89, 1};
    int N2 = sizeof(a2) / sizeof(a2[0]);
    printf("Input: N=%d, a[] = {12,4,78,23,45,67,89,1}\n");
    quickSort(a2, 0, N2 - 1);
    printf("Output: ");
    printArray(a2, N2);

    int a3[] = {38, 27, 43, 3, 9, 82, 10};
    int N3 = sizeof(a3) / sizeof(a3[0]);
    printf("Input: N=%d, a[] = {38,27,43,3,9,82,10}\n");
    quickSort(a3, 0, N3 - 1);
    printf("Output: ");
    printArray(a3, N3);

    return 0;
}
