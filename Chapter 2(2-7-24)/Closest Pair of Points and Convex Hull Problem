#include <stdio.h>
#include <math.h>
#include <float.h>

// Structure to represent a point in 2D space
typedef struct {
    double x, y;
} Point;

// Function to calculate the Euclidean distance between two points
double distance(Point p1, Point p2) {
    return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

// Function to find the closest pair of points using brute force
void findClosestPair(Point points[], int n, Point *p1, Point *p2, double *minDist) {
    *minDist = DBL_MAX; // Initialize the minimum distance to a large value

    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            double dist = distance(points[i], points[j]);
            if (dist < *minDist) {
                *minDist = dist;
                *p1 = points[i];
                *p2 = points[j];
            }
        }
    }
}

int main() {
    // Input points
    Point points[] = {{1, 2}, {4, 5}, {7, 8}, {3, 1}};
    int n = sizeof(points) / sizeof(points[0]);

    Point p1, p2;
    double minDist;

    // Find the closest pair of points
    findClosestPair(points, n, &p1, &p2, &minDist);

    // Output the closest pair of points and the minimum distance
    printf("Closest pair: (%.0f, %.0f) - (%.0f, %.0f)\n", p1.x, p1.y, p2.x, p2.y);
    printf("Minimum distance: %lf\n", minDist);

    return 0;
}
