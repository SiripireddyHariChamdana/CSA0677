#include <stdio.h>

// Function to print the array
void printArray(int arr[], int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("%d", arr[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

// Function to perform Insertion Sort
void insertionSort(int arr[], int size) {
    int i, key, j;
    for (i = 1; i < size; i++) {
        key = arr[i];
        j = i - 1;

        // Move elements of arr[0..i-1], that are greater than key,
        // to one position ahead of their current position
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int main() {
    // Test case 1: Array with duplicates
    int arr1[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    printf("Input: ");
    printArray(arr1, size1);
    insertionSort(arr1, size1);
    printf("Output: ");
    printArray(arr1, size1);

    // Test case 2: All identical elements
    int arr2[] = {5, 5, 5, 5, 5};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("Input: ");
    printArray(arr2, size2);
    insertionSort(arr2, size2);
    printf("Output: ");
    printArray(arr2, size2);

    // Test case 3: Mixed duplicates
    int arr3[] = {2, 3, 1, 3, 2, 1, 1, 3};
    int size3 = sizeof(arr3) / sizeof(arr3[0]);
    printf("Input: ");
    printArray(arr3, size3);
    insertionSort(arr3, size3);
    printf("Output: ");
    printArray(arr3, size3);

    return 0;
}
