#include <stdio.h>

// Structure to represent a 2D point
struct Point {
    int x, y;
};

// Function to find the orientation of triplet (p, q, r)
int orientation(struct Point p, struct Point q, struct Point r) {
    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;  // Collinear
    return (val > 0) ? 1 : 2; // Clockwise or Counterclockwise
}

// Function to find the convex hull of a set of points
void convexHull(struct Point points[], int n) {
    if (n < 3) return; // Convex hull not possible

    // Initialize the convex hull as an empty array
    int hull[n], hullSize = 0;

    // Find the leftmost point
    int leftmost = 0;
    for (int i = 1; i < n; i++) {
        if (points[i].x < points[leftmost].x) leftmost = i;
    }

    int p = leftmost, q;
    do {
        hull[hullSize++] = p;
        q = (p + 1) % n;
        for (int i = 0; i < n; i++) {
            if (orientation(points[p], points[i], points[q]) == 2) {
                q = i;
            }
        }
        p = q;
    } while (p != leftmost);

    // Print the convex hull points in counter-clockwise order
    for (int i = 0; i < hullSize; i++) {
        printf("(%d, %d) ", points[hull[i]].x, points[hull[i]].y);
    }
}

int main() {
    struct Point points[] = {{1, 1}, {4, 6}, {8, 1}, {0, 0}, {3, 3}};
    int n = sizeof(points) / sizeof(points[0]);
    convexHull(points, n);
    return 0;
}
