#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 40

// Function to generate all subset sums
void generateSubsetSums(int arr[], int n, int sums[], int* size) {
    *size = 1 << n; // 2^n subset sums
    for (int i = 0; i < *size; i++) {
        sums[i] = 0;
        for (int j = 0; j < n; j++) {
            if (i & (1 << j)) {
                sums[i] += arr[j];
            }
        }
    }
}

// Comparator function for qsort
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

// Function to check if there is a subset with given sum
int meetInTheMiddle(int arr[], int n, int target) {
    int n1 = n / 2;
    int n2 = n - n1;

    int sum1[1 << n1];
    int sum2[1 << n2];
    int size1, size2;

    // Generate all subset sums for both halves
    generateSubsetSums(arr, n1, sum1, &size1);
    generateSubsetSums(arr + n1, n2, sum2, &size2);

    // Sort the second half sums
    qsort(sum2, size2, sizeof(int), compare);

    // Check if any pair of sums from sum1 and sum2 add up to the target
    for (int i = 0; i < size1; i++) {
        int remaining = target - sum1[i];
        if (bsearch(&remaining, sum2, size2, sizeof(int), compare)) {
            return 1; // Found a pair that adds up to the target
        }
    }

    return 0; // No subset found
}

int main() {
    int arr[] = {1, 3, 9, 2, 7, 8};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 10;

    if (meetInTheMiddle(arr, n, target)) {
        printf("Subset with target sum %d found.\n", target);
    } else {
        printf("No subset with target sum %d found.\n", target);
    }

    return 0;
}
