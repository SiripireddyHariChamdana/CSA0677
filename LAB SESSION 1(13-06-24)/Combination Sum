#include <stdio.h>
#include <stdlib.h>

void findCombinations(int* candidates, int candidatesSize, int target, int start, int* combination, int combinationSize, int** result, int* returnSize, int* returnColumnSizes) {
    if (target == 0) {
        result[*returnSize] = (int*)malloc(sizeof(int) * combinationSize);
        for (int i = 0; i < combinationSize; i++) {
            result[*returnSize][i] = combination[i];
        }
        returnColumnSizes[*returnSize] = combinationSize;
        (*returnSize)++;
        return;
    }

    for (int i = start; i < candidatesSize; i++) {
        if (target - candidates[i] >= 0) {
            combination[combinationSize] = candidates[i];
            findCombinations(candidates, candidatesSize, target - candidates[i], i, combination, combinationSize + 1, result, returnSize, returnColumnSizes);
        }
    }
}

int** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {
    *returnSize = 0;
    int** result = (int**)malloc(sizeof(int*) * 150);
    *returnColumnSizes = (int*)malloc(sizeof(int) * 150);
    int* combination = (int*)malloc(sizeof(int) * 150);

    findCombinations(candidates, candidatesSize, target, 0, combination, 0, result, returnSize, *returnColumnSizes);

    return result;
}

int main() {
    int candidates[] = {2, 3, 6, 7};
    int target = 7;
    int candidatesSize = sizeof(candidates) / sizeof(candidates[0]);
    int returnSize;
    int* returnColumnSizes;

    int** result = combinationSum(candidates, candidatesSize, target, &returnSize, &returnColumnSizes);

    printf("Output: \n");
    printf("[");
    for (int i = 0; i < returnSize; i++) {
        printf("[");
        for (int j = 0; j < returnColumnSizes[i]; j++) {
            printf("%d", result[i][j]);
            if (j < returnColumnSizes[i] - 1) {
                printf(",");
            }
        }
        printf("]");
        if (i < returnSize - 1) {
            printf(",");
        }
        printf("\n");
    }
    printf("]\n");

    // Freeing memory
    for (int i = 0; i < returnSize; i++) {
        free(result[i]);
    }
    free(result);
    free(returnColumnSizes);

    return 0;
}

